<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Auto Counter Queue System</title>
  <style>
   body{font-family:inherit;padding:20px}
   h2{margin-top:30px}
   ul{list-style-type:none;padding-left:0}
   li{padding:5px 0;font-weight: 800;}
   button{margin:10px 10px 10px 0;padding:10px 20px;font-size:16px}
   #queueList{margin-top:20px}
  .counter_con{display:flex;gap:300px}
  </style>
</head>
<body>

  <h1>List of Queue for Todays Transactions <span class="datenow"></span></h1>

  <button onclick="callNext()">üé§ Call Next</button>
  <button onclick="repeatCall()">üîÅ Call Again</button>

  <h2>All Today's Approved Bookings</h2>
  <ul id="queueList"></ul>

<div class="counter_con">
  <div id="counter1">
    <h2>Counter 1 </h2>
    <ul id="counter1List"></ul>
  </div>

  <div id="counter2">
    <h2>Counter 2 </h2>
    <ul id="counter2List"></ul>
  </div>
  </div>

 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  var BookingList = [];
  let queue = [];
  let counter1 = [];
  let counter2 = [];
  let currentCall = null;

  $(document).ready(function () {
    getBooking();

    function getBooking() {
      $.ajax("../api/adminapi/getBookings")
        .done(function (result) {
          BookingList = result;
          initializeQueue();
        })
        .fail(function () {
          alert("Failed to fetch booking data.");
        });
    }

    function initializeQueue() {
      // Format today's date as YYYY-MM-DD
      let today = new Date();
      let formattedToday = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;

      // Filter approved bookings for today
      queue = BookingList.filter(
        entry => entry.status === "Approved" && entry.bookingDate === formattedToday
      );

      updateDisplay();
    }

    // UI elements
    const list1 = $("#counter1List");
    const list2 = $("#counter2List");
    const queueList = $("#queueList");

    

    function updateDisplay() {
      // Counter 1
      list1.empty();
      counter1.forEach(entry => {
        list1.append(`<li>${entry.prioritynumber} - ${entry.firstname} ${entry.middlename} ${entry.lastname}</li>`);
      });

      // Counter 2
      list2.empty();
      counter2.forEach(entry => {
        list2.append(`<li>${entry.prioritynumber} - ${entry.firstname} ${entry.middlename} ${entry.lastname}</li>`);
      });

      // Full queue list (approved bookings for today)
      let today = new Date();
      let formattedToday = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;

      queueList.empty();
      BookingList
        .filter(entry => entry.status === "Approved" && entry.bookingDate === formattedToday)
        .forEach(entry => {
          queueList.append(`<li>${entry.prioritynumber} - ${entry.firstname} ${entry.middlename} ${entry.lastname} (${entry.transactionName})</li>`);
        });
    }

    function classifyCounter(transactionName) {
      const counter1Services = ["Student Permit", "License Conversion"];
      return counter1Services.includes(transactionName) ? 1 : 2;
    }

    window.callNext = function () {
      if (queue.length === 0) {
        alert("No more people in the queue.");
        return;
      }

      const next = queue.shift(); // Get first in queue
      const counter = classifyCounter(next.transactionName);
      const counterList = counter === 1 ? counter1 : counter2;

      counterList.push(next);
      currentCall = { person: next, counter: counter };
      updateDisplay();

      speakNow(`Now serving ${next.prioritynumber} ${next.firstname} ${next.middlename} ${next.lastname} at counter ${counter}`);
    };

    window.repeatCall = function () {
      if (!currentCall) {
        alert("No one has been called yet.");
        return;
      }
      const { person, counter } = currentCall;
      speakNow(`Now serving ${person.prioritynumber} ${person.firstname} ${person.middlename} ${person.lastname} at counter ${counter}`);
    };

    function speakNow(text) {
      const utterance = new SpeechSynthesisUtterance(text);
      speechSynthesis.speak(utterance);
    }
  });
</script>


</body>
</html>
