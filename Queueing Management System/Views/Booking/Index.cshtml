@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
   <!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Login & Registration Form</title>
  <!---Custom CSS File--->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

  <link rel="stylesheet" href="~/css/calendar.css">
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200">


</head>

 <h1 class="w-40 text-center">Palihog pislita lang ang adlaw og petsa nga ganahan nimo magpa Appoint, Daghang Salamat!</h1>

<div class="calendar_con">
   
   

  <div class="wrapper-calendar">
    <header>
      <p class="current-date"></p>
      <div class="icons">
        <span id="prev" class="material-symbols-rounded">chevron_left</span>
        <span id="next" class="material-symbols-rounded">chevron_right</span>
      </div>
    </header>
    <div class="calendar">
      <ul class="weeks">
        <li>Sun</li>
        <li>Mon</li>
        <li>Tue</li>
        <li>Wed</li>
        <li>Thu</li>
        <li>Fri</li>
        <li>Sat</li>
      </ul>
      <ul class="days"></ul>
    </div>
  </div>

 </div>

</div>


 @Html.Partial("pop-upBooking")


</html>


<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/emailjs/dist/email.min.js"></script>



<script>
  var DateList = [];
  var listDate = [];
  var selectedDate;

  $(() => {

    margin();
    getTransaction();

    function margin() {

      $(".page-content").removeClass();
      $(".container-fluid").removeClass();
    }

    
      function getTransaction() {
            $.ajax("../api/adminapi/getTransaction")
                .done(function (result) {

                    document.querySelector("#appSelect").innerHTML = "";

                    var template = document.querySelector("template#TransactionOptionTemplate");
                    var parent = document.querySelectorAll("#appSelect");


                    for (i = 0; i < parent.length; i++) {
                        result.forEach(function (item) {
                            var cloned = template.content.cloneNode(true);
                            cloned.querySelector("option").value = item.transactionId;
                            cloned.querySelector("option").innerText = item.transactionName;
   
                                parent[i].prepend(cloned);
                        });
                    }

                });

        }


const daysTag = $(".days"),
      currentDate = $(".current-date");

let date = new Date(),
    currYear = date.getFullYear(),
    currMonth = date.getMonth();

// Month names
const months = ["January", "February", "March", "April", "May", "June", "July",
                "August", "September", "October", "November", "December"];

// Fixed Philippine holidays (MM-DD)
const fixedHolidays = [
  "01-01", // New Year
  "04-09", // Araw ng Kagitingan
  "05-01", // Labor Day
  "06-12", // Independence Day
  "08-21", // Ninoy Aquino Day
  "11-01", // All Saints' Day
  "12-25", // Christmas
  "12-30"  // Rizal Day
];

// ✅ Sample booking data (simulate as if from DB/API)
const bookingData = {
  "2025-05-05": 32,
  "2025-05-06": 99,
  "2025-05-07": 100,
  "2025-05-10": 150,
  "2025-06-01": 101
};

const renderCalendar = () => {
  let firstDayofMonth = new Date(currYear, currMonth, 1).getDay(),
      lastDateofMonth = new Date(currYear, currMonth + 1, 0).getDate(),
      lastDayofMonth = new Date(currYear, currMonth, lastDateofMonth).getDay(),
      lastDateofLastMonth = new Date(currYear, currMonth, 0).getDate();

  let liTag = "";

  // Previous month trailing days
  for (let i = firstDayofMonth; i > 0; i--) {
    liTag += `<li class="inactive">${lastDateofLastMonth - i + 1}</li>`;
  }

  // Current month days
  for (let i = 1; i <= lastDateofMonth; i++) {
    const paddedMonth = (currMonth + 1).toString().padStart(2, '0');
    const paddedDay = i.toString().padStart(2, '0');
    const fullDate = `${currYear}-${paddedMonth}-${paddedDay}`;
    const shortDate = `${paddedMonth}-${paddedDay}`;

    const tempDate = new Date(fullDate);
    const day = tempDate.getDay(); // 0 = Sunday, 6 = Saturday

    const isWeekend = (day === 0 || day === 6);
    const isHoliday = fixedHolidays.includes(shortDate);

    // Booking logic
    const bookingCount = bookingData[fullDate] || 0;
    const isFullyBooked = bookingCount >= 100;

    let isInactive = (isWeekend || isHoliday || isFullyBooked) ? "inactive" : "";
    let customText = "";

    if (isHoliday) customText = "Holiday";
    else if (day === 0) customText = "Sunday";
    else if (day === 6) customText = "Saturday";
    else if (isFullyBooked) customText = "Fully Booked";

    liTag += `<li class="${isInactive}">${i}${customText ? `<span class="custom-text">${customText}</span>` : ""}</li>`;
  }

  // Next month leading days
  for (let i = lastDayofMonth; i < 6; i++) {
    liTag += `<li class="inactive">${i - lastDayofMonth + 1}</li>`;
  }

  currentDate.text(`${months[currMonth]} ${currYear}`);
  daysTag.html(liTag);
};

renderCalendar();

// Handle month switch
$(".icons span").click(function () {
  currMonth = $(this).attr("id") === "prev" ? currMonth - 1 : currMonth + 1;

  if (currMonth < 0 || currMonth > 11) {
    date = new Date(currYear, currMonth, new Date().getDate());
    currYear = date.getFullYear();
    currMonth = date.getMonth();
  } else {
    date = new Date(currYear, currMonth);
  }

  renderCalendar();
});


// Delegate click event on active days
$(document).on("click", ".days li:not(.inactive)", function () {
  const selectedDay = $(this).clone().children().remove().end().text().trim(); // remove span.custom-text safely
  const paddedDay = selectedDay.padStart(2, '0');
  const paddedMonth = (currMonth + 1).toString().padStart(2, '0');
  selectedDate = `${currYear}-${paddedMonth}-${paddedDay}`;

  
  const selectedDateObj = new Date(`${selectedDate}T00:00:00`);
  const options = { year: 'numeric', month: 'long', day: 'numeric' };
  const formattedDate = selectedDateObj.toLocaleDateString('en-US', options);
  
  $(".chosen-date").text(formattedDate);

  
  console.log("Selected Date:", selectedDate);
    console.log("Selected Date:", formattedDate);

  // Optional: You can set the selected date somewhere if needed
  // $("#inputTransactionDate").val(selectedDate);

  // Show the modal
  const modal = new bootstrap.Modal(document.getElementById("modalAppointmentCreate"));
  modal.show();


});

 $("#createAppointment").click((e) => {
  e.preventDefault();

  var arrData = {};
  var emptyFields = [];
  var formelements = $("#createAppointmentForm .form-group");
  var formInputs = $("#createAppointmentForm").serializeArray();

  formInputs.forEach(function (item) {
    arrData[item.name] = item.value;
    if (!item.value.trim()) {
      emptyFields.push(item.name);
    }
  });

  arrData.BookingDate = selectedDate;
  arrData.Status = "Pending";
  arrData.Prioritynumber = "Pending";
  arrData.ValidId = "na";

  if (emptyFields.length > 0) {
    console.warn("Empty fields detected:", emptyFields.join(", "));
    Swal.fire("Error", "Please fill out all fields.", "warning");
    return;
  }

  // Proceed with AJAX only if all fields are filled
  $.ajax({
    url: "../api/adminapi/addBooking",
    type: "POST",
    data: {
      addBooking: arrData
    },
    success: function () {
      $("#createAppointmentForm")[0].reset();
      $("#modalAppointmentCreate").modal("toggle");
      displaySavedProgress();
    },
    error: function () {
      Swal.fire("Error", "Submission failed.", "error");
    }
  });
});









    function empty() {
      Swal.fire({
        icon: 'error',
        title: 'Validation Error',
        text: 'Please fill in all required fields!',
        confirmButtonText: 'OK'

      });
    }



    function error() {
      Swal.fire({
        icon: 'error',
        title: 'Email Account not found',
        text: 'Email is invalid!',
        confirmButtonText: 'OK'
      });
    }

    function gmailvalidation() {
      Swal.fire({
        icon: 'error',
        title: 'Incorrect Password and Email',
        text: 'Email and Password is invalid!',
        confirmButtonText: 'OK'
      });
    }


    function displaySavedProgress() {
      Swal.fire({
        icon: 'success',
        title: 'Welcome',
        text: 'Successfully Login',
        showConfirmButton: false,
        timer: 3500
      })

    }




  });//end of docuent ready

</script>
<style>
  .sidebar-wrapper {
    display: none;
  }
</style>

